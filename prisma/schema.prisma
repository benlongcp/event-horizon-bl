//
//=====================================================================================
//-------------------------------------------------------------------------------------
// If receive error regarding privileges or password during attempts to run this file 
// or connect to database:
//
//  > sudo mysql
//  > ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '';
//  > exit;
//
// The previous set of commands will set your account settings within mySQL so that
// your password is set to an empty string. If you do not want to set your password
// to an empty string, ensure that the password is reflected below.
//-------------------------------------------------------------------------------------
//=====================================================================================
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_AWS_FULL")
}

/// Contains bi-directional friendship with 'friends' and 'friendOf' property
/// This ensures that there are no duplicate friendships
model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  google_id      String   @unique
  email          String   @unique
  name           String?
  score          Int      @default(0)
  selectedDeckId Int?
  wins           Int      @default(0)
  losses         Int      @default(0)
  lastLogin      DateTime @default(now())

  User_Games        User_Games[]
  User_Cards        User_Cards[]
  User_Decks        User_Decks[]
  Games             Games[]
  friends           Friends[]           @relation("UserFriends")
  friendOf          Friends[]           @relation("Friendships")
  selectedDeck      User_Decks?         @relation("SelectedDeck", fields: [selectedDeckId], references: [id])
  Round_Player_Info Round_Player_Info[]
  Actions           Actions[]
  User_Settings     User_Settings[]
  Game_Card_States  Game_Card_States[]

  @@unique([id, selectedDeckId])
  @@unique([id, name])
}

// https://github.com/prisma/prisma/discussions/13214
model Friends {
  id        Int @id @default(autoincrement())
  user_id   Int
  friend_id Int

  user   User @relation("UserFriends", fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  friend User @relation("Friendships", fields: [friend_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([user_id, friend_id])
}

// for every Game
// there can be multiple Users
// there can be multiple Rounds
model Games {
  id         Int       @id @default(autoincrement()) /// This is used for a socket connection, it is the session ID.
  status     Boolean   @default(true) /// This indicates if the Game session is still active.
  start_date DateTime  @default(now())
  end_date   DateTime?
  victor_id  Int?

  User_Games     User_Games[]
  Rounds         Rounds[]
  victor         User?            @relation(fields: [victor_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  Actions_Loaded Actions_Loaded[]
  Round_Effects  Round_Effects[]
}

// User_Games associates a Game with a User
// there can be multiple Users for a Game
// there can be multiple Games for a User
model User_Games {
  id            Int  @id @default(autoincrement())
  game_id       Int
  user_id       Int?
  selected_deck Int?

  game Games @relation(fields: [game_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user User? @relation(fields: [user_id, selected_deck], references: [id, selectedDeckId], onUpdate: Cascade, onDelete: SetNull)
}

// Rounds associates a Round with a specific Game
// there can be many Rounds for one Game
// there will not be many Games for one Round
model Rounds {
  id         Int       @id @default(autoincrement())
  actual     Int       @default(1)
  game_id    Int
  start_date DateTime  @default(now())
  end_date   DateTime?

  Actions_Loaded Actions_Loaded[]
  Round_Effects  Round_Effects[]

  game              Games               @relation(fields: [game_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Round_Player_Info Round_Player_Info[]
  Actions           Actions[]

  Game_Card_States Game_Card_States[]
}

// Theoretically immutable; we create actions here
// They exist only in database to prevent cheaters from providing invalid action
model Actions {
  id       Int     @id @default(autoincrement())
  round_id Int
  user_id  Int
  action   String?

  /// if a card is specified, auto-populates data
  card_id     Int?
  name        String? @default("")
  description String? @default("")
  damage      Int?    @default(0)
  armor       Int?    @default(0)
  image_url   String? @default("")
  duration    Int?    @default(0)
  effect      String? @default("")
  expedite    Boolean @default(false)

  card           Cards?           @relation(fields: [card_id, name, description, damage, armor, image_url, duration, effect], references: [id, name, description, damage, armor, image_url, duration, effect], onUpdate: Cascade, onDelete: Cascade)
  user           User             @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  round          Rounds           @relation(fields: [round_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Actions_Loaded Actions_Loaded[]
  Round_Effects  Round_Effects[]

  @@unique([id, user_id])
}

model Actions_Loaded {
  id        Int     @id @default(autoincrement())
  game_id   Int
  round_id  Int
  action_id Int
  user_id   Int
  card_id   Int?
  damage    Int?
  armor     Int?
  duration  Int?
  effect    String?

  round  Rounds  @relation(fields: [round_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  game   Games   @relation(fields: [game_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  action Actions @relation(fields: [action_id, user_id], references: [id, user_id], onUpdate: Cascade, onDelete: Cascade)
  card   Cards?  @relation(fields: [card_id, damage, armor, duration, effect], references: [id, damage, armor, duration, effect], onUpdate: Cascade, onDelete: SetNull)
}

model Round_Effects {
  id           Int     @id @default(autoincrement())
  round_id     Int
  action_id    Int
  game_id      Int
  user_id      Int
  card_id      Int?
  damage       Int?
  armor        Int?
  duration     Int?
  effect       String?
  time_elapsed Int     @default(0)

  round  Rounds  @relation(fields: [round_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  action Actions @relation(fields: [action_id, user_id], references: [id, user_id], onUpdate: Cascade, onDelete: Cascade)
  card   Cards?  @relation(fields: [card_id, damage, armor, duration, effect], references: [id, damage, armor, duration, effect], onUpdate: Cascade, onDelete: Cascade)
  game   Games   @relation(fields: [game_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Round_Player_Info {
  id       Int    @id @default(autoincrement())
  round_id Int
  user_id  Int
  name     String @default("")
  health   Int    @default(50)
  armor    Int    @default(20)

  user  User   @relation(fields: [user_id, name], references: [id, name], onUpdate: Cascade, onDelete: Cascade)
  round Rounds @relation(fields: [round_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Game_Card_States {
  id       Int   @id @default(autoincrement())
  round_id Int
  user_id  Int
  deck     Json?
  hand     Json?

  user  User   @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  round Rounds @relation(fields: [round_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

// Theoretically immutable; we create cards and assign them to relationships in User_Cards when earned
model Cards {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  name           String   @default("")
  description    String   @default("")
  damage         Int      @default(0)
  armor          Int      @default(0)
  image_url      String   @default("")
  duration       Int      @default(0)
  effect         String   @default("")
  score_required Int      @default(0)
  points         Int      @default(0)
  expedite       Boolean  @default(false)

  User_Cards     User_Cards[]
  Actions        Actions[]
  Actions_Loaded Actions_Loaded[]
  Round_Effects  Round_Effects[]

  @@unique([id, damage, armor, duration, effect])
  @@unique([id, name, description, damage, armor, image_url, duration, effect])
}

// Many Users can have many Cards
// This table is a reflection of such, showing the relationship
model User_Cards {
  id          Int      @id @default(autoincrement())
  earnedAt    DateTime @default(now())
  user_id     Int
  card_id     Int
  name        String   @default("")
  description String   @default("")
  damage      Int      @default(0)
  armor       Int      @default(0)
  image_url   String   @default("")
  duration    Int      @default(0)
  effect      String   @default("")

  user User  @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  card Cards @relation(fields: [card_id, name, description, damage, armor, image_url, duration, effect], references: [id, name, description, damage, armor, image_url, duration, effect], onUpdate: Cascade, onDelete: Cascade)

  User_Deck_Cards User_Deck_Cards[]

  @@unique([id, name, description, damage, armor, image_url, duration, effect])
}

// Users can build card decks from the cards assigned in User_Cards
model User_Decks {
  id        Int    @id @default(autoincrement())
  user_id   Int
  deck_name String

  User_Decks_Cards User_Deck_Cards[]
  user             User              @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  selectedByUsers  User[]            @relation("SelectedDeck")
}

model User_Deck_Cards {
  id          Int    @id @default(autoincrement())
  deck_id     Int
  card_id     Int
  name        String @default("")
  description String @default("")
  damage      Int    @default(0)
  armor       Int    @default(0)
  image_url   String @default("")
  duration    Int    @default(0)
  effect      String @default("")

  deck      User_Decks @relation(fields: [deck_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userCards User_Cards @relation(fields: [card_id, name, description, damage, armor, image_url, duration, effect], references: [id, name, description, damage, armor, image_url, duration, effect], onUpdate: Cascade, onDelete: Cascade)
}

model User_Settings {
  id              Int     @id @default(autoincrement())
  user_id         Int     @unique
  dark_mode       Boolean @default(false)
  colorblind_mode Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
